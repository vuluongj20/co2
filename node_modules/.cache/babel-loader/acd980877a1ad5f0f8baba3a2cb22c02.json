{"ast":null,"code":"var _jsxFileName = \"/Users/vu/Documents/Work/Repositories/co2/src/components/section/viz/PolarPlot.js\";\nimport React, { Component } from 'react';\nimport './PolarPlot.scss';\nimport { select, scaleLinear, extent, min, axisBottom, axisRight, lineRadial, easeQuad, easeQuadOut, easeCubicOut } from 'd3';\n\nclass PolarPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vizCreated: false,\n      currentState: -1,\n      updateFunc: null\n    };\n    this.createViz = this.createViz.bind(this);\n    this.vizRef = React.createRef();\n  }\n\n  createViz(data) {\n    let margin = 80,\n        radius = Math.min(window.innerWidth - 440, window.innerHeight - 200),\n        innerRadius = radius - margin,\n        grandDaddy = select('#polar-plot'),\n        svg = grandDaddy.select('.viz-svg-wrap').append('svg').attr('width', radius).attr('height', radius).attr('class', 'viz'),\n        a = scaleLinear().domain([0, 365.25]).range([0, 2 * Math.PI]),\n        r = scaleLinear().domain(extent(data, (d, i) => {\n      return d.level;\n    })).range([0, innerRadius / 2]).nice(),\n        totalLength = null,\n        minDate = min(data, function (d) {\n      return d.date;\n    }),\n        xDays = data.map(d => (d.date.getTime() - minDate.getTime()) / (1000 * 60 * 60 * 24) % 365.25);\n    let rAxis = svg.append('g').attr('class', 'r axis').attr('transform', 'translate(' + radius / 2 + ' ' + radius / 2 + ')'),\n        aAxis = svg.append('g').attr('class', 'a axis').attr('transform', 'translate(' + radius / 2 + ' ' + radius / 2 + ')');\n    rAxis.selectAll('circle').data(r.ticks(5)).enter().append('circle').attr('class', 'grid-circle').attr('r', r);\n    rAxis.selectAll('text').data(r.ticks(5).slice(1)).enter().append('text').attr('class', 'r tick').attr('text-anchor', 'middle').attr('alignment-baseline', 'central').attr('dx', function (d) {\n      return r(d) * Math.cos(-Math.PI / 12);\n    }).attr('dy', function (d) {\n      return r(d) * Math.sin(-Math.PI / 12);\n    }).text(function (d) {\n      return d;\n    });\n    aAxis.selectAll('line').data(Array(6)).enter().append('line').attr('class', 'grid-line').attr('x1', 0).attr('x2', 0).attr('y1', -innerRadius / 2).attr('y2', innerRadius / 2).attr('transform', function (_, i) {\n      return 'rotate(' + 30 * i + ')';\n    });\n    aAxis.selectAll('text').data(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']).enter().append('text').attr('class', 'r tick').attr('text-anchor', 'middle').attr('alignment-baseline', 'central').attr('dx', function (_, i) {\n      return (innerRadius / 2 + 24) * Math.cos((i / 6 - 1 / 2) * Math.PI);\n    }).attr('dy', function (_, i) {\n      return (innerRadius / 2 + 24) * Math.sin((i / 6 - 1 / 2) * Math.PI);\n    }).text(function (d) {\n      return d;\n    });\n    let dataLine = svg.append('path').datum(data).attr('class', 'data-line').attr('transform', 'translate(' + radius / 2 + ' ' + radius / 2 + ')').attr('d', lineRadial().angle(function (_, index) {\n      return a(xDays[index]);\n    }).radius(function (d) {\n      return r(d.level);\n    })); // Animate data line\n\n    totalLength = dataLine.node().getTotalLength();\n    dataLine.attr(\"stroke-dasharray\", totalLength + \" \" + totalLength).attr(\"stroke-dashoffset\", totalLength).transition().duration(1600).ease(easeQuadOut).attr('stroke-dashoffset', 0);\n    this.setState({\n      vizCreated: true,\n      updateFunc: (to, from) => {\n        let regLineLength = null,\n            yReg = null,\n            newText = to !== -1 ? this.vizRef.current.querySelector('.viz-des-text:nth-child(' + (to + 1) + ')') : null;\n\n        if (to > from) {\n          if (newText) {\n            newText.classList.add('on');\n          }\n\n          let increment = target => {\n            switch (target) {\n              case 0:\n                // Initial\n                // Main data line\n                let dataLine = svg.append('path').datum(data).attr('class', 'data-line').attr('d', lineRadial().x(function () {\n                  return a(xDays) + margin;\n                }).y(function (d) {\n                  return r(d.level) + margin;\n                })); // Animate data line\n\n                totalLength = dataLine.node().getTotalLength();\n                dataLine.attr(\"stroke-dasharray\", totalLength + \" \" + totalLength).attr(\"stroke-dashoffset\", totalLength).transition().duration(800).ease(easeCubicOut).attr('stroke-dashoffset', 0);\n                break;\n              //       case 1: // Linear\n              //         yReg = xDays.map(d => this.props.content[1].params[0] + this.props.content[1].params[1]*d)\n              //         let regLine = svg.append('path')\n              //           .datum(data)\n              //           .attr('class', 'reg-line')\n              //           .attr('d', line()\n              //             .x(function(d) { return x(d.date) + margin.left })\n              //             .y(function(d, i) {return y(yReg[i]) + margin.top })\n              //         ),\n              //         regLineLabel = svg.append('g')\n              //           .attr('class', 'reg-line-label')\n              //           .attr('transform',\n              //             'translate('\n              //             + (x(data[Math.ceil(data.length*0.52)]['date']) + margin.left + 60)\n              //             + ', '\n              //             + (y(yReg[Math.ceil(yReg.length*0.52)]) + margin.top + 20)\n              //             + ')'\n              //           )\n              //         grandDaddy.select('.bottom-axis').raise()\n              //         regLineLabel.style('opacity', 0)\n              //           .transition()\n              //             .duration(720)\n              //             .ease(easeQuad)\n              //             .style('opacity', 1)\n              //         regLineLabel.append('rect')\n              //           .attr('class', 'reg-line-label-rect linear')\n              //           .attr('rx', 4)\n              //           .attr('ry', 4)\n              //           .style('width', '4.6em')\n              //         let regLineLabelText = regLineLabel.append('text')\n              //             .attr('class', 'reg-line-label-text')\n              //         regLineLabelText.append('tspan')\n              //             .attr('class', 'linear span')\n              //             .text('y = αx')\n              //         regLineLength = regLine.node().getTotalLength()\n              //         regLine.attr(\"stroke-dasharray\", regLineLength + \" \" + regLineLength)\n              //           .attr(\"stroke-dashoffset\", regLineLength)\n              //           .transition()\n              //             .duration(800)\n              //             .ease(easeCubicOut)\n              //             .attr('stroke-dashoffset', 0)\n              //         grandDaddy.select('.data-line').attr('class', 'data-line faded')\n              //         grandDaddy.selectAll('.reg-line-label-text>tspan:not(.linear)')\n              //           .each(function(d) {\n              //             let currentSpan = select(this)\n              //             if (!currentSpan.node().classList.contains('off')) {\n              //               currentSpan.node().classList.add('off')\n              //             }\n              //           })\n              //         break\n              //       case 2: // Quadratic\n              //         yReg = xDays.map(d => this.props.content[2].params[0] + this.props.content[2].params[1]*d + this.props.content[2].params[2]*d**2)\n              //         grandDaddy.select('.reg-line').transition()\n              //           .duration(800)\n              //           .ease(easeCubicOut)\n              //           .attr('d', line()\n              //             .x(function(d) { return x(d.date) + margin.left })\n              //             .y(function(d, i) {return y(yReg[i]) + margin.top })\n              //           )\n              //         regLineLength = grandDaddy.select('.reg-line').node().getTotalLength()\n              //         grandDaddy.select('.reg-line').attr(\"stroke-dasharray\", 0)\n              //           .attr('stroke-dashoffset', 0)\n              //         grandDaddy.select('.reg-line-label-rect')\n              //           .attr('class', 'reg-line-label-rect quadratic')\n              //           .transition()\n              //             .duration(600)\n              //             .ease(easeCubicOut)\n              //             .style('width', '7.7em')\n              //         grandDaddy.select('.reg-line-label-text').append('tspan')\n              //           .attr('class', 'quadratic span')\n              //           .text(' + βx\\u00b2')\n              //           .style('opacity', 0)\n              //             .transition()\n              //               .duration(800)\n              //               .ease(easeQuad)\n              //               .style('opacity', 1)\n              //         grandDaddy.selectAll('.reg-line-label-text>tspan:not(.quadratic)')\n              //           .each(function(d) {\n              //             let currentSpan = select(this)\n              //             if (!currentSpan.node().classList.contains('off')) {\n              //               currentSpan.node().classList.add('off')\n              //             }\n              //           })\n              //         break\n              //       case 3: // Cosine\n              //         yReg = xDays.map(d => this.props.content[3].params[0]\n              //           + this.props.content[3].params[1]*d\n              //           + this.props.content[3].params[2]*d**2\n              //           + this.props.content[3].params[3]*Math.cos(2*Math.PI*d/365.25 + this.props.content[3].params[4])\n              //         )\n              //         grandDaddy.select('.reg-line').attr(\"stroke-dasharray\", regLineLength + \" \" + regLineLength)\n              //           .transition()\n              //             .duration(800)\n              //             .ease(easeCubicOut)\n              //             .attr('d', line()\n              //               .x(function(d) { return x(d.date) + margin.left })\n              //               .y(function(d, i) {return y(yReg[i]) + margin.top })\n              //           )\n              //         regLineLength = grandDaddy.select('.reg-line').node().getTotalLength()\n              //         grandDaddy.select('.reg-line').attr(\"stroke-dasharray\", 0)\n              //           .attr('stroke-dashoffset', 0)\n              //         grandDaddy.select('.reg-line-label-rect')\n              //           .attr('class', 'reg-line-label-rect cosine')\n              //           .transition()\n              //             .duration(600)\n              //             .ease(easeCubicOut)\n              //             .style('width', '15.6em')\n              //         grandDaddy.select('.reg-line-label-text').append('tspan')\n              //           .attr('class', 'cosine span')\n              //           .text(' + cos(2πt + φ)')\n              //           .style('opacity', 0)\n              //             .transition()\n              //               .duration(800)\n              //               .ease(easeQuad)\n              //               .style('opacity', 1)\n              //         grandDaddy.selectAll('.reg-line-label-text>tspan:not(.cosine)')\n              //           .each(function(d) {\n              //             let currentSpan = select(this)\n              //             if (!currentSpan.node().classList.contains('off')) {\n              //               currentSpan.node().classList.add('off')\n              //             }\n              //           })\n              //         break\n              //       default:\n              //     }\n              //   }\n              //   for (let i = from; i < to; i++) {\n              //     let prevText = this.vizRef.current.querySelector('.viz-des-text:nth-child(' + (i + 1) + ')')\n              //     increment(i + 1)\n              //     if (prevText) {\n              //       prevText.classList.remove('on')\n              //       prevText.classList.remove('on-reverse')\n              //     }\n              //   }\n              // } else if (to < from) {\n              //   if (newText) {\n              //     newText.classList.add('on-reverse')\n              //   }\n              //   let decrement = (target) => {\n              //     console.log(target)\n              //     switch(target) {\n              //       case -1:\n              //         let dataLineLength = grandDaddy.select('.data-line').node().getTotalLength()\n              //         grandDaddy.select('.data-line').attr('stroke-dashoffset', 0)\n              //           .transition()\n              //             .duration(800)\n              //             .ease(easeCubicOut)\n              //             .attr('stroke-dashoffset', -dataLineLength)\n              //             .remove()\n              //         break\n              //       case 0: // Initial\n              //         regLineLength = grandDaddy.select('.reg-line').node().getTotalLength()\n              //         grandDaddy.select('.reg-line').attr('stroke-dashoffset', 0)\n              //           .transition()\n              //             .duration(800)\n              //             .ease(easeCubicOut)\n              //             .attr('stroke-dashoffset', -regLineLength)\n              //             .remove()\n              //         grandDaddy.select('.data-line').attr('class', 'data-line')\n              //         grandDaddy.select('.reg-line-label').style('opacity', 1)\n              //           .transition()\n              //             .duration(800)\n              //             .ease(easeCubicOut)\n              //             .style('opacity', 0)\n              //             .remove()\n              //         break\n              //       case 1: // Linear\n              //         yReg = xDays.map(d => this.props.content[1].params[0] + this.props.content[1].params[1]*d)\n              //         grandDaddy.select('.reg-line').transition()\n              //           .duration(800)\n              //           .ease(easeCubicOut)\n              //           .attr('d', line()\n              //             .x(function(d) { return x(d.date) + margin.left })\n              //             .y(function(d, i) {return y(yReg[i]) + margin.top })\n              //         )\n              //         regLineLength = grandDaddy.select('.reg-line').node().getTotalLength()\n              //         grandDaddy.select('.reg-line').attr(\"stroke-dasharray\", regLineLength + \" \" + regLineLength)\n              //         grandDaddy.select('.reg-line-label-text>.quadratic.span').style('opacity', 1)\n              //           .transition()\n              //             .duration(320)\n              //             .ease(easeCubicOut)\n              //             .style('opacity', 0)\n              //             .remove()\n              //         grandDaddy.select('.reg-line-label-rect').attr('class', 'reg-line-label-rect linear')\n              //           .transition()\n              //             .duration(600)\n              //             .ease(easeCubicOut)\n              //             .style('width', '4.6em')\n              //         setTimeout(() => {\n              //           grandDaddy.select('.reg-line-label-rect').attr('class', 'reg-line-label-rect linear')\n              //         })\n              //         grandDaddy.select('.reg-line-label-text>.linear.span').attr('class', 'linear span on')\n              //         break\n              //       case 2: // Quadratic\n              //         yReg = xDays.map(d => this.props.content[2].params[0]\n              //           + this.props.content[2].params[1]*d\n              //           + this.props.content[2].params[2]*d**2)\n              //         grandDaddy.select('.reg-line').transition()\n              //           .duration(800)\n              //           .ease(easeCubicOut)\n              //           .attr('d', line()\n              //             .x(function(d) { return x(d.date) + margin.left })\n              //             .y(function(d, i) {return y(yReg[i]) + margin.top })\n              //         )\n              //         regLineLength = grandDaddy.select('.reg-line').node().getTotalLength()\n              //         grandDaddy.select('.reg-line').attr(\"stroke-dasharray\", regLineLength + \" \" + regLineLength)\n              //         grandDaddy.select('.reg-line-label-text>.cosine.span').style('opacity', 1)\n              //           .transition()\n              //             .duration(320)\n              //             .ease(easeCubicOut)\n              //             .style('opacity', 0)\n              //             .remove()\n              //         grandDaddy.select('.reg-line-label-rect').attr('class', 'reg-line-label-rect quadratic')\n              //           .transition()\n              //             .duration(600)\n              //             .ease(easeCubicOut)\n              //             .style('width', '7.7em')\n              //         setTimeout(() => {\n              //           grandDaddy.select('.reg-line-label-rect').attr('class', 'reg-line-label-rect quadratic')\n              //         })\n              //         grandDaddy.select('.reg-line-label-text>.quadratic.span').attr('class', 'quadratic span on')\n              //         break\n\n              default:\n            }\n          };\n\n          for (let i = from; i > to; i--) {\n            let prevText = this.vizRef.current.querySelector('.viz-des-text:nth-child(' + (i + 1) + ')');\n            increment(i - 1);\n\n            if (prevText) {\n              prevText.classList.remove('on');\n              prevText.classList.remove('on-reverse');\n            }\n          }\n        }\n\n        this.setState({\n          currentState: to\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.createViz(this.props.data); // let vizObserver = new IntersectionObserver(\n    //   (entries, observer) => {\n    //     if (entries[0].isIntersecting && !this.state.vizCreated) {\n    //       this.setState({\n    //         vizCreated: true\n    //       }, () => {\n    //         this.createViz(this.props.data)\n    //       })\n    //     }\n    //   },\n    //   {\n    //     rootMargin: '0 0 -70%',\n    //     threshold: 0\n    //   })\n    // vizObserver.observe(this.vizRef.current)\n    //\n    // let vizScrollObserver = new IntersectionObserver(\n    //   (entries, observer) => {\n    //     entries.forEach((entry) => {\n    //       if (entry.isIntersecting) {\n    //         let index = entry.target.dataset.index\n    //         if (!this.state.vizCreated) {\n    //           this.createViz(this.props.data)\n    //         }\n    //         this.state.updateFunc(Number(index), this.state.currentState)\n    //       }\n    //     })\n    //   },\n    //   {\n    //     threshold: 0\n    //   }\n    // )\n    // document.querySelectorAll('.viz-scroll-anchor').forEach(el => {\n    //   vizScrollObserver.observe(el)\n    // })\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"polar-plot\",\n      className: \"viz-outer-wrap\",\n      ref: this.vizRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"viz-scroll-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"viz-scroll-anchor\",\n      \"data-index\": \"-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }), this.props.content.map((_, index) => {\n      return React.createElement(\"div\", {\n        className: \"viz-scroll-anchor\",\n        \"data-index\": index,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426\n        },\n        __self: this\n      });\n    }), React.createElement(\"div\", {\n      className: \"viz-scroll-dummy-anchor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"viz-wrap\",\n      id: \"line-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"viz-svg-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"viz-des-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, this.props.content.map((chunk, index) => {\n      return React.createElement(\"p\", {\n        className: \"viz-des-text\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436\n        },\n        __self: this\n      }, chunk.des);\n    }))));\n  }\n\n}\n\nexport default PolarPlot;","map":{"version":3,"sources":["/Users/vu/Documents/Work/Repositories/co2/src/components/section/viz/PolarPlot.js"],"names":["React","Component","select","scaleLinear","extent","min","axisBottom","axisRight","lineRadial","easeQuad","easeQuadOut","easeCubicOut","PolarPlot","constructor","props","state","vizCreated","currentState","updateFunc","createViz","bind","vizRef","createRef","data","margin","radius","Math","window","innerWidth","innerHeight","innerRadius","grandDaddy","svg","append","attr","a","domain","range","PI","r","d","i","level","nice","totalLength","minDate","date","xDays","map","getTime","rAxis","aAxis","selectAll","ticks","enter","slice","cos","sin","text","Array","_","dataLine","datum","angle","index","node","getTotalLength","transition","duration","ease","setState","to","from","regLineLength","yReg","newText","current","querySelector","classList","add","increment","target","x","y","prevText","remove","componentDidMount","render","content","chunk","des"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACM;AAlPF;AAoPD,WArPD;;AAsPA,eAAK,IAAIO,CAAC,GAAG+B,IAAb,EAAmB/B,CAAC,GAAG8B,EAAvB,EAA2B9B,CAAC,EAA5B,EAAgC;AAC9B,gBAAI2C,QAAQ,GAAG,KAAK/D,MAAL,CAAYuD,OAAZ,CAAoBC,aAApB,CAAkC,8BAA8BpC,CAAC,GAAG,CAAlC,IAAuC,GAAzE,CAAf;AACAuC,YAAAA,SAAS,CAACvC,CAAC,GAAG,CAAL,CAAT;;AACA,gBAAI2C,QAAJ,EAAc;AACZA,cAAAA,QAAQ,CAACN,SAAT,CAAmBO,MAAnB,CAA0B,IAA1B;AACAD,cAAAA,QAAQ,CAACN,SAAT,CAAmBO,MAAnB,CAA0B,YAA1B;AACD;AACF;AACF;;AACD,aAAKf,QAAL,CAAc;AACZrD,UAAAA,YAAY,EAAEsD;AADF,SAAd;AAGD;AA5QW,KAAd;AA8QD;;AACDe,EAAAA,iBAAiB,GAAG;AAClB,SAAKnE,SAAL,CAAe,KAAKL,KAAL,CAAWS,IAA1B,EADkB,CAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACDgE,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,EAAE,EAAC,YAAR;AAAqB,MAAA,SAAS,EAAC,gBAA/B;AAAgD,MAAA,GAAG,EAAE,KAAKlE,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAmC,oBAAW,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKP,KAAL,CAAW0E,OAAX,CAAmBxC,GAAnB,CAAuB,CAACY,CAAD,EAAII,KAAJ,KAAc;AACpC,aACE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAmC,sBAAYA,KAA/C;AAAsD,QAAA,GAAG,EAAEA,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD,KAJA,CAFH,EAOE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF,EAUE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,EAAE,EAAC,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKlD,KAAL,CAAW0E,OAAX,CAAmBxC,GAAnB,CAAuB,CAACyC,KAAD,EAAQzB,KAAR,KAAkB;AACxC,aACE;AAAG,QAAA,SAAS,EAAC,cAAb;AAA4B,QAAA,GAAG,EAAEA,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyCyB,KAAK,CAACC,GAA/C,CADF;AAGD,KAJA,CADH,CAFF,CAVF,CADF;AAuBD;;AA7a+B;;AAgblC,eAAe9E,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport './PolarPlot.scss';\nimport { select,\n  scaleLinear,\n  extent,\n  min,\n  axisBottom, axisRight,\n  lineRadial,\n  easeQuad,\n  easeQuadOut,\n  easeCubicOut\n } from 'd3';\n\nclass PolarPlot extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      vizCreated: false,\n      currentState: -1,\n      updateFunc: null\n    }\n    this.createViz = this.createViz.bind(this)\n    this.vizRef = React.createRef()\n  }\n  createViz(data) {\n    let margin = 80,\n      radius = Math.min(window.innerWidth - 440, window.innerHeight - 200),\n      innerRadius = radius - margin,\n      grandDaddy = select('#polar-plot'),\n      svg = grandDaddy.select('.viz-svg-wrap')\n      .append('svg')\n        .attr('width', radius)\n        .attr('height', radius)\n        .attr('class', 'viz'),\n      a = scaleLinear()\n      .domain([0, 365.25])\n      .range([0, 2*Math.PI]),\n      r = scaleLinear()\n      .domain(extent(data, (d, i) => {return d.level}))\n      .range([0, innerRadius/2])\n      .nice(),\n      totalLength = null,\n      minDate = min(data, function(d) {return d.date}),\n      xDays = data.map(d => (d.date.getTime() - minDate.getTime())/(1000*60*60*24) % 365.25)\n\n      let rAxis = svg.append('g')\n        .attr('class', 'r axis')\n        .attr('transform', 'translate(' + (radius/2) + ' ' + (radius/2) + ')'),\n      aAxis = svg.append('g')\n        .attr('class', 'a axis')\n        .attr('transform', 'translate(' + (radius/2) + ' ' + (radius/2) + ')')\n\n      rAxis.selectAll('circle')\n        .data(r.ticks(5))\n        .enter()\n        .append('circle')\n          .attr('class', 'grid-circle')\n          .attr('r', r)\n\n      rAxis.selectAll('text')\n        .data(r.ticks(5).slice(1))\n        .enter()\n        .append('text')\n          .attr('class', 'r tick')\n          .attr('text-anchor', 'middle')\n          .attr('alignment-baseline', 'central')\n          .attr('dx', function(d) {return r(d)*Math.cos(-Math.PI/12)})\n          .attr('dy', function(d) {return r(d)*Math.sin(-Math.PI/12)})\n          .text(function (d) {return d})\n\n      aAxis.selectAll('line')\n        .data(Array(6))\n        .enter()\n        .append('line')\n          .attr('class', 'grid-line')\n          .attr('x1', 0)\n          .attr('x2', 0)\n          .attr('y1', -innerRadius/2)\n          .attr('y2', innerRadius/2)\n          .attr('transform', function(_, i) {return 'rotate(' + (30*i) + ')'})\n\n      aAxis.selectAll('text')\n        .data(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n        .enter()\n        .append('text')\n          .attr('class', 'r tick')\n          .attr('text-anchor', 'middle')\n          .attr('alignment-baseline', 'central')\n          .attr('dx', function(_, i) {return (innerRadius/2 + 24)*Math.cos((i/6 - 1/2)*Math.PI)})\n          .attr('dy', function(_, i) {return (innerRadius/2 + 24)*Math.sin((i/6 - 1/2)*Math.PI)})\n          .text(function (d) {return d})\n\n    let dataLine = svg.append('path')\n      .datum(data)\n      .attr('class', 'data-line')\n      .attr('transform', 'translate(' + (radius/2) + ' ' + (radius/2) + ')')\n      .attr('d', lineRadial()\n        .angle(function(_, index) { return a(xDays[index]) })\n        .radius(function(d) { return r(d.level) })\n      )\n\n    // Animate data line\n    totalLength = dataLine.node().getTotalLength()\n    dataLine.attr(\"stroke-dasharray\", totalLength + \" \" + totalLength)\n      .attr(\"stroke-dashoffset\", totalLength)\n      .transition()\n        .duration(1600)\n        .ease(easeQuadOut)\n        .attr('stroke-dashoffset', 0)\n    this.setState({\n      vizCreated: true,\n      updateFunc: (to, from) => {\n        let regLineLength = null,\n          yReg = null,\n          newText = to !== -1 ? this.vizRef.current.querySelector('.viz-des-text:nth-child(' + (to + 1) + ')') : null\n        if (to > from) {\n          if (newText) {\n            newText.classList.add('on')\n          }\n          let increment = (target) => {\n            switch(target) {\n              case 0: // Initial\n                // Main data line\n                let dataLine = svg.append('path')\n                  .datum(data)\n                  .attr('class', 'data-line')\n                  .attr('d', lineRadial()\n                    .x(function() { return a(xDays) + margin })\n                    .y(function(d) { return r(d.level) + margin })\n                  )\n\n                // Animate data line\n                totalLength = dataLine.node().getTotalLength()\n                dataLine.attr(\"stroke-dasharray\", totalLength + \" \" + totalLength)\n                  .attr(\"stroke-dashoffset\", totalLength)\n                  .transition()\n                    .duration(800)\n                    .ease(easeCubicOut)\n                    .attr('stroke-dashoffset', 0)\n                break\n        //       case 1: // Linear\n        //         yReg = xDays.map(d => this.props.content[1].params[0] + this.props.content[1].params[1]*d)\n        //         let regLine = svg.append('path')\n        //           .datum(data)\n        //           .attr('class', 'reg-line')\n        //           .attr('d', line()\n        //             .x(function(d) { return x(d.date) + margin.left })\n        //             .y(function(d, i) {return y(yReg[i]) + margin.top })\n        //         ),\n        //         regLineLabel = svg.append('g')\n        //           .attr('class', 'reg-line-label')\n        //           .attr('transform',\n        //             'translate('\n        //             + (x(data[Math.ceil(data.length*0.52)]['date']) + margin.left + 60)\n        //             + ', '\n        //             + (y(yReg[Math.ceil(yReg.length*0.52)]) + margin.top + 20)\n        //             + ')'\n        //           )\n        //         grandDaddy.select('.bottom-axis').raise()\n        //         regLineLabel.style('opacity', 0)\n        //           .transition()\n        //             .duration(720)\n        //             .ease(easeQuad)\n        //             .style('opacity', 1)\n        //         regLineLabel.append('rect')\n        //           .attr('class', 'reg-line-label-rect linear')\n        //           .attr('rx', 4)\n        //           .attr('ry', 4)\n        //           .style('width', '4.6em')\n        //         let regLineLabelText = regLineLabel.append('text')\n        //             .attr('class', 'reg-line-label-text')\n        //         regLineLabelText.append('tspan')\n        //             .attr('class', 'linear span')\n        //             .text('y = αx')\n        //         regLineLength = regLine.node().getTotalLength()\n        //         regLine.attr(\"stroke-dasharray\", regLineLength + \" \" + regLineLength)\n        //           .attr(\"stroke-dashoffset\", regLineLength)\n        //           .transition()\n        //             .duration(800)\n        //             .ease(easeCubicOut)\n        //             .attr('stroke-dashoffset', 0)\n        //         grandDaddy.select('.data-line').attr('class', 'data-line faded')\n        //         grandDaddy.selectAll('.reg-line-label-text>tspan:not(.linear)')\n        //           .each(function(d) {\n        //             let currentSpan = select(this)\n        //             if (!currentSpan.node().classList.contains('off')) {\n        //               currentSpan.node().classList.add('off')\n        //             }\n        //           })\n        //         break\n        //       case 2: // Quadratic\n        //         yReg = xDays.map(d => this.props.content[2].params[0] + this.props.content[2].params[1]*d + this.props.content[2].params[2]*d**2)\n        //         grandDaddy.select('.reg-line').transition()\n        //           .duration(800)\n        //           .ease(easeCubicOut)\n        //           .attr('d', line()\n        //             .x(function(d) { return x(d.date) + margin.left })\n        //             .y(function(d, i) {return y(yReg[i]) + margin.top })\n        //           )\n        //         regLineLength = grandDaddy.select('.reg-line').node().getTotalLength()\n        //         grandDaddy.select('.reg-line').attr(\"stroke-dasharray\", 0)\n        //           .attr('stroke-dashoffset', 0)\n        //         grandDaddy.select('.reg-line-label-rect')\n        //           .attr('class', 'reg-line-label-rect quadratic')\n        //           .transition()\n        //             .duration(600)\n        //             .ease(easeCubicOut)\n        //             .style('width', '7.7em')\n        //         grandDaddy.select('.reg-line-label-text').append('tspan')\n        //           .attr('class', 'quadratic span')\n        //           .text(' + βx\\u00b2')\n        //           .style('opacity', 0)\n        //             .transition()\n        //               .duration(800)\n        //               .ease(easeQuad)\n        //               .style('opacity', 1)\n        //         grandDaddy.selectAll('.reg-line-label-text>tspan:not(.quadratic)')\n        //           .each(function(d) {\n        //             let currentSpan = select(this)\n        //             if (!currentSpan.node().classList.contains('off')) {\n        //               currentSpan.node().classList.add('off')\n        //             }\n        //           })\n        //         break\n        //       case 3: // Cosine\n        //         yReg = xDays.map(d => this.props.content[3].params[0]\n        //           + this.props.content[3].params[1]*d\n        //           + this.props.content[3].params[2]*d**2\n        //           + this.props.content[3].params[3]*Math.cos(2*Math.PI*d/365.25 + this.props.content[3].params[4])\n        //         )\n        //         grandDaddy.select('.reg-line').attr(\"stroke-dasharray\", regLineLength + \" \" + regLineLength)\n        //           .transition()\n        //             .duration(800)\n        //             .ease(easeCubicOut)\n        //             .attr('d', line()\n        //               .x(function(d) { return x(d.date) + margin.left })\n        //               .y(function(d, i) {return y(yReg[i]) + margin.top })\n        //           )\n        //         regLineLength = grandDaddy.select('.reg-line').node().getTotalLength()\n        //         grandDaddy.select('.reg-line').attr(\"stroke-dasharray\", 0)\n        //           .attr('stroke-dashoffset', 0)\n        //         grandDaddy.select('.reg-line-label-rect')\n        //           .attr('class', 'reg-line-label-rect cosine')\n        //           .transition()\n        //             .duration(600)\n        //             .ease(easeCubicOut)\n        //             .style('width', '15.6em')\n        //         grandDaddy.select('.reg-line-label-text').append('tspan')\n        //           .attr('class', 'cosine span')\n        //           .text(' + cos(2πt + φ)')\n        //           .style('opacity', 0)\n        //             .transition()\n        //               .duration(800)\n        //               .ease(easeQuad)\n        //               .style('opacity', 1)\n        //         grandDaddy.selectAll('.reg-line-label-text>tspan:not(.cosine)')\n        //           .each(function(d) {\n        //             let currentSpan = select(this)\n        //             if (!currentSpan.node().classList.contains('off')) {\n        //               currentSpan.node().classList.add('off')\n        //             }\n        //           })\n        //         break\n        //       default:\n        //     }\n        //   }\n        //   for (let i = from; i < to; i++) {\n        //     let prevText = this.vizRef.current.querySelector('.viz-des-text:nth-child(' + (i + 1) + ')')\n        //     increment(i + 1)\n        //     if (prevText) {\n        //       prevText.classList.remove('on')\n        //       prevText.classList.remove('on-reverse')\n        //     }\n        //   }\n        // } else if (to < from) {\n        //   if (newText) {\n        //     newText.classList.add('on-reverse')\n        //   }\n        //   let decrement = (target) => {\n        //     console.log(target)\n        //     switch(target) {\n        //       case -1:\n        //         let dataLineLength = grandDaddy.select('.data-line').node().getTotalLength()\n        //         grandDaddy.select('.data-line').attr('stroke-dashoffset', 0)\n        //           .transition()\n        //             .duration(800)\n        //             .ease(easeCubicOut)\n        //             .attr('stroke-dashoffset', -dataLineLength)\n        //             .remove()\n        //         break\n        //       case 0: // Initial\n        //         regLineLength = grandDaddy.select('.reg-line').node().getTotalLength()\n        //         grandDaddy.select('.reg-line').attr('stroke-dashoffset', 0)\n        //           .transition()\n        //             .duration(800)\n        //             .ease(easeCubicOut)\n        //             .attr('stroke-dashoffset', -regLineLength)\n        //             .remove()\n        //         grandDaddy.select('.data-line').attr('class', 'data-line')\n        //         grandDaddy.select('.reg-line-label').style('opacity', 1)\n        //           .transition()\n        //             .duration(800)\n        //             .ease(easeCubicOut)\n        //             .style('opacity', 0)\n        //             .remove()\n        //         break\n        //       case 1: // Linear\n        //         yReg = xDays.map(d => this.props.content[1].params[0] + this.props.content[1].params[1]*d)\n        //         grandDaddy.select('.reg-line').transition()\n        //           .duration(800)\n        //           .ease(easeCubicOut)\n        //           .attr('d', line()\n        //             .x(function(d) { return x(d.date) + margin.left })\n        //             .y(function(d, i) {return y(yReg[i]) + margin.top })\n        //         )\n        //         regLineLength = grandDaddy.select('.reg-line').node().getTotalLength()\n        //         grandDaddy.select('.reg-line').attr(\"stroke-dasharray\", regLineLength + \" \" + regLineLength)\n        //         grandDaddy.select('.reg-line-label-text>.quadratic.span').style('opacity', 1)\n        //           .transition()\n        //             .duration(320)\n        //             .ease(easeCubicOut)\n        //             .style('opacity', 0)\n        //             .remove()\n        //         grandDaddy.select('.reg-line-label-rect').attr('class', 'reg-line-label-rect linear')\n        //           .transition()\n        //             .duration(600)\n        //             .ease(easeCubicOut)\n        //             .style('width', '4.6em')\n        //         setTimeout(() => {\n        //           grandDaddy.select('.reg-line-label-rect').attr('class', 'reg-line-label-rect linear')\n        //         })\n        //         grandDaddy.select('.reg-line-label-text>.linear.span').attr('class', 'linear span on')\n        //         break\n        //       case 2: // Quadratic\n        //         yReg = xDays.map(d => this.props.content[2].params[0]\n        //           + this.props.content[2].params[1]*d\n        //           + this.props.content[2].params[2]*d**2)\n        //         grandDaddy.select('.reg-line').transition()\n        //           .duration(800)\n        //           .ease(easeCubicOut)\n        //           .attr('d', line()\n        //             .x(function(d) { return x(d.date) + margin.left })\n        //             .y(function(d, i) {return y(yReg[i]) + margin.top })\n        //         )\n        //         regLineLength = grandDaddy.select('.reg-line').node().getTotalLength()\n        //         grandDaddy.select('.reg-line').attr(\"stroke-dasharray\", regLineLength + \" \" + regLineLength)\n        //         grandDaddy.select('.reg-line-label-text>.cosine.span').style('opacity', 1)\n        //           .transition()\n        //             .duration(320)\n        //             .ease(easeCubicOut)\n        //             .style('opacity', 0)\n        //             .remove()\n        //         grandDaddy.select('.reg-line-label-rect').attr('class', 'reg-line-label-rect quadratic')\n        //           .transition()\n        //             .duration(600)\n        //             .ease(easeCubicOut)\n        //             .style('width', '7.7em')\n        //         setTimeout(() => {\n        //           grandDaddy.select('.reg-line-label-rect').attr('class', 'reg-line-label-rect quadratic')\n        //         })\n        //         grandDaddy.select('.reg-line-label-text>.quadratic.span').attr('class', 'quadratic span on')\n        //         break\n              default:\n            }\n          }\n          for (let i = from; i > to; i--) {\n            let prevText = this.vizRef.current.querySelector('.viz-des-text:nth-child(' + (i + 1) + ')')\n            increment(i - 1)\n            if (prevText) {\n              prevText.classList.remove('on')\n              prevText.classList.remove('on-reverse')\n            }\n          }\n        }\n        this.setState({\n          currentState: to\n        })\n      }\n    })\n  }\n  componentDidMount() {\n    this.createViz(this.props.data)\n    // let vizObserver = new IntersectionObserver(\n    //   (entries, observer) => {\n    //     if (entries[0].isIntersecting && !this.state.vizCreated) {\n    //       this.setState({\n    //         vizCreated: true\n    //       }, () => {\n    //         this.createViz(this.props.data)\n    //       })\n    //     }\n    //   },\n    //   {\n    //     rootMargin: '0 0 -70%',\n    //     threshold: 0\n    //   })\n    // vizObserver.observe(this.vizRef.current)\n    //\n    // let vizScrollObserver = new IntersectionObserver(\n    //   (entries, observer) => {\n    //     entries.forEach((entry) => {\n    //       if (entry.isIntersecting) {\n    //         let index = entry.target.dataset.index\n    //         if (!this.state.vizCreated) {\n    //           this.createViz(this.props.data)\n    //         }\n    //         this.state.updateFunc(Number(index), this.state.currentState)\n    //       }\n    //     })\n    //   },\n    //   {\n    //     threshold: 0\n    //   }\n    // )\n    // document.querySelectorAll('.viz-scroll-anchor').forEach(el => {\n    //   vizScrollObserver.observe(el)\n    // })\n  }\n  render() {\n    return (\n      <div id=\"polar-plot\" className=\"viz-outer-wrap\" ref={this.vizRef}>\n        <div className=\"viz-scroll-box\">\n          <div className=\"viz-scroll-anchor\" data-index=\"-1\"></div>\n          {this.props.content.map((_, index) => {\n            return (\n              <div className=\"viz-scroll-anchor\" data-index={index} key={index}></div>\n            )\n          })}\n          <div className=\"viz-scroll-dummy-anchor\"></div>\n        </div>\n        <div className=\"viz-wrap\" id=\"line-chart\">\n          <div className=\"viz-svg-wrap\"></div>\n          <div className=\"viz-des-wrap\">\n            {this.props.content.map((chunk, index) => {\n              return (\n                <p className=\"viz-des-text\" key={index}>{chunk.des}</p>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PolarPlot;\n"]},"metadata":{},"sourceType":"module"}